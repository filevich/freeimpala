# Use continuumio/miniconda3 as the base image
FROM continuumio/miniconda3:latest

# Define build argument for OpenMPI version with default
ARG OPENMPI_VERSION=5.0.5

# Install OpenMPI, CMake, and compilers via conda
RUN conda install -c conda-forge \
        openmpi=${OPENMPI_VERSION} \
        cmake \
        make \
        compilers && \
    conda clean -afy

# Install additional system dependencies
RUN apt-get update && \
    apt-get install -y --no-install-recommends \
        libssl-dev \
        wget && \
    rm -rf /var/lib/apt/lists/*

# Set working directory
WORKDIR /app
COPY . /app

# Ensure Conda's bin and lib directories are in PATH and LD_LIBRARY_PATH
ENV PATH="/opt/conda/bin:${PATH}"
ENV LD_LIBRARY_PATH="/opt/conda/lib:${LD_LIBRARY_PATH}"

# Allow OpenMPI to run as root within the Docker container
ENV OMPI_ALLOW_RUN_AS_ROOT=1
ENV OMPI_ALLOW_RUN_AS_ROOT_CONFIRM=1

# Explicitly activate Conda environment
RUN . /opt/conda/etc/profile.d/conda.sh && conda activate base

# Download argparse header (since FetchContent may not work smoothly in Docker)
RUN mkdir -p include/argparse && \
    wget https://raw.githubusercontent.com/p-ranav/argparse/v2.9/include/argparse/argparse.hpp -O include/argparse/argparse.hpp

# Build freeimpala with g++
RUN mkdir -p build_vanilla && \
    cd build_vanilla && \
    cmake -DCMAKE_CXX_COMPILER=g++ -DCMAKE_VERBOSE_MAKEFILE=ON .. && \
    cmake --build . && \
    mkdir -p /app/build && \
    cp freeimpala /app/build/

# Build freeimpala_mpi with mpicxx and mpicc
RUN mkdir -p build_mpi && \
    cd build_mpi && \
    cmake -DCMAKE_CXX_COMPILER=mpicxx -DCMAKE_C_COMPILER=mpicc -DCMAKE_VERBOSE_MAKEFILE=ON .. && \
    cmake --build . && \
    mkdir -p /app/build && \
    cp freeimpala_mpi /app/build/

# Verify OpenMPI version
RUN mpirun --version

# Verify binaries exist
RUN ls -l /app/build/freeimpala /app/build/freeimpala_mpi || true

# Set entrypoint to run the binaries (optional, adjust as needed)
CMD ["/bin/bash"]